{"version":3,"sources":["Api.ts","components/User/User.tsx","components/Todo/Todo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","response","json","User","user","className","name","Todo","todo","title","completed","TodoList","todos","sortByName","sortByTitle","sortByComplete","type","value","onClick","map","key","id","App","useState","setTodos","isLoading","setLoading","isStarted","setStarted","disabled","Promise","all","then","preparedTodos","find","person","userId","sort","b","localeCompare","Number","ReactDOM","render","document","getElementById"],"mappings":"6PAGaA,EAAO,uCAAG,WAAUC,GAAV,eAAAC,EAAA,sEACEC,MAAMF,GADR,cACfG,EADe,yBAGdA,EAASC,QAHK,2CAAH,sDCGPC,EAAkB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAChC,OAAOA,EAAO,wBAAIC,UAAU,UAAUD,EAAKE,MAAa,8BCA7CC,EAAkB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OAC7B,wBAAIH,UAAU,OACZ,kBAAC,EAAD,CAAMD,KAAMI,EAAKJ,OACjB,wBAAIC,UAAU,UAAUG,EAAKC,OAC7B,wBAAIJ,UAAU,UAAUG,EAAKE,UAAY,OAAS,SCDzCC,EAAsB,SAAC,GAAD,IACjCC,EADiC,EACjCA,MAAOC,EAD0B,EAC1BA,WAAYC,EADc,EACdA,YAAaC,EADC,EACDA,eADC,OAGjC,2BAAOV,UAAU,SACf,+BACE,wBAAIA,UAAU,OACZ,wBAAIA,UAAU,eACZ,4BACEW,KAAK,SACLC,MAAM,OACNZ,UAAU,qBACVa,QAASL,GAJX,SASF,4BACE,4BACEG,KAAK,SACLC,MAAM,QACNZ,UAAU,qBACVa,QAASJ,GAJX,UASF,4BACE,4BACEE,KAAK,SACLC,MAAM,SACNZ,UAAU,qBACVa,QAASH,GAJX,aAWN,+BACGH,EAAMO,KAAI,SAAAX,GAAI,OAAI,kBAAC,EAAD,CAAMY,IAAKZ,EAAKa,GAAIb,KAAMA,UCgBpCc,G,MA3DK,WAAO,IAAD,EACEC,mBAAwB,IAD1B,mBACjBX,EADiB,KACVY,EADU,OAEQD,oBAAkB,GAF1B,mBAEjBE,EAFiB,KAENC,EAFM,OAGQH,oBAAkB,GAH1B,mBAGjBI,EAHiB,KAGNC,EAHM,KAiCxB,OACE,oCAEID,EAEI,4BACEX,KAAK,SACLX,UAAU,qBACVwB,SAAUJ,EACVP,QArCK,WACfQ,GAAW,GAEXI,QAAQC,IAAI,CJJPlC,EATQ,8CAaRA,EAdQ,gDIeVmC,MAAK,SAAA/B,GACJ,IAAMgC,EAAgBhC,EAAS,GAAGkB,KAAI,SAAAX,GAAI,sBACrCA,EADqC,CAExCJ,KAAMH,EAAS,GAAGiC,MAAK,SAAAC,GAAM,OAAI3B,EAAK4B,SAAWD,EAAOd,WAG1DG,EAASS,GACTP,GAAW,GACXE,GAAW,QA2BJH,EAAY,aAAe,QAG9B,kBAAC,EAAD,CACEb,MAAOA,EACPC,WA5BO,WACjBW,EAAS,YAAIZ,GAAOyB,MAAK,SAACtC,EAAGuC,GAAJ,OAAUvC,EAAEK,KAAKE,KAAKiC,cAAcD,EAAElC,KAAKE,WA4B1DQ,YAzBQ,WAClBU,EAAS,YAAIZ,GAAOyB,MAAK,SAACtC,EAAGuC,GAAJ,OAAUvC,EAAEU,MAAM8B,cAAcD,EAAE7B,YAyBjDM,eAtBW,WACrBS,EAAS,YAAIZ,GAAOyB,MAAK,SAACtC,EAAGuC,GAAJ,OAAUE,OAAOzC,EAAEW,WAAa8B,OAAOF,EAAE5B,qBChCtE+B,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.49bacd02.chunk.js","sourcesContent":["const usersURL = 'https://jsonplaceholder.typicode.com/users';\nconst todosURL = 'https://jsonplaceholder.typicode.com/todos';\n\nexport const getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getTodos = (): Promise<Todos> => {\n  return getData<Todos>(todosURL);\n};\n\nexport const getUsers = (): Promise<Users> => {\n  return getData<Users>(usersURL);\n};\n","import React, { FC } from 'react';\n\ninterface Props {\n  user: User | undefined;\n}\n\nexport const User: FC<Props> = ({ user }) => {\n  return user ? <td className=\"column\">{user.name}</td> : <td />;\n};\n","import React, { FC } from 'react';\nimport { User } from '../User/User';\n\ninterface Props {\n  todo: TodoWithUser;\n}\n\nexport const Todo: FC<Props> = ({ todo }) => (\n  <tr className=\"row\">\n    <User user={todo.user} />\n    <td className=\"column\">{todo.title}</td>\n    <td className=\"column\">{todo.completed ? 'Done' : '---'}</td>\n  </tr>\n);\n","import React, { FC } from 'react';\nimport { Todo } from '../Todo/Todo';\n\ninterface Props {\n  todos: TodosWithUser;\n  sortByName: () => void;\n  sortByTitle: () => void;\n  sortByComplete: () => void;\n}\n\nexport const TodoList: FC<Props> = ({\n  todos, sortByName, sortByTitle, sortByComplete,\n}) => (\n  <table className=\"table\">\n    <thead>\n      <tr className=\"row\">\n        <th className=\"head-column\">\n          <button\n            type=\"button\"\n            value=\"Name\"\n            className=\"button-sort button\"\n            onClick={sortByName}\n          >\n            Name\n          </button>\n        </th>\n        <th>\n          <button\n            type=\"button\"\n            value=\"Todos\"\n            className=\"button-sort button\"\n            onClick={sortByTitle}\n          >\n            Todos\n          </button>\n        </th>\n        <th>\n          <button\n            type=\"button\"\n            value=\"Status\"\n            className=\"button-sort button\"\n            onClick={sortByComplete}\n          >\n            Status\n          </button>\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n      {todos.map(todo => <Todo key={todo.id} todo={todo} />)}\n    </tbody>\n  </table>\n);\n","import React, { FC, useState } from 'react';\nimport { getTodos, getUsers } from './Api';\nimport { TodoList } from './components/TodoList/TodoList';\n\nimport './App.css';\n\nconst App: FC<{}> = () => {\n  const [todos, setTodos] = useState<TodosWithUser>([]);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [isStarted, setStarted] = useState<boolean>(true);\n\n  const loadData = () => {\n    setLoading(true);\n\n    Promise.all([getTodos(), getUsers()])\n      .then(response => {\n        const preparedTodos = response[0].map(todo => ({\n          ...todo,\n          user: response[1].find(person => todo.userId === person.id) as User,\n        }));\n\n        setTodos(preparedTodos);\n        setLoading(false);\n        setStarted(false);\n      });\n  };\n\n  const sortByName = () => {\n    setTodos([...todos].sort((a, b) => a.user.name.localeCompare(b.user.name)));\n  };\n\n  const sortByTitle = () => {\n    setTodos([...todos].sort((a, b) => a.title.localeCompare(b.title)));\n  };\n\n  const sortByComplete = () => {\n    setTodos([...todos].sort((a, b) => Number(a.completed) - Number(b.completed)));\n  };\n\n  return (\n    <>\n      {\n        isStarted\n          ? (\n            <button\n              type=\"button\"\n              className=\"button button-load\"\n              disabled={isLoading}\n              onClick={loadData}\n            >\n              {isLoading ? 'Loading...' : 'Load'}\n            </button>\n          ) : (\n            <TodoList\n              todos={todos}\n              sortByName={sortByName}\n              sortByTitle={sortByTitle}\n              sortByComplete={sortByComplete}\n            />\n          )\n      }\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}